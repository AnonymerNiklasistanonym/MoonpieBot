# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  # Run CI when a new version tag is created
  create:
    tags:
      - v*
  # Run CI when a new commit is pushed
  push:
    branches: [ main, dev ]
  # Run CI when a new pull request is created
  pull_request:
    branches: [ main, dev ]

jobs:


  # Check if the project can be built without errors
  # Linting, tests and documentation generation is allowed to fail so that in
  # case of an error in them the core build and scripts are still verified
  build:

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-latest,windows-latest]
        include:
          - os: ubuntu-latest
            os-name: linux
            binary-name: moonpiebot
            man-page-name: moonpiebot-man.1
          - os: windows-latest
            os-name: windows
            binary-name: moonpiebot.exe
            binary-name-installer: moonpiebot_setup.exe

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies (apt - Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install graphviz pandoc
    - name: Install dependencies (choco - Windows)
      if: matrix.os == 'windows-latest'
      run: choco install graphviz nsis pandoc
    - name: Install dependencies (NSIS-plugins - Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $EnVarPluginArchive = Join-Path "installer" (Join-Path "windows_installer" "EnVar.zip")
        $NsisDir = Join-Path "${env:ProgramFiles(x86)}" "NSIS"
        Expand-Archive $EnVarPluginArchive -DestinationPath $NsisDir -Force
    - name: Install dependencies (npm)
      run: npm ci
    - name: Run tests
      run: npm run test
      continue-on-error: true
    - name: Lint
      run: npm run lint
      continue-on-error: true
    - name: Build
      run: npm run build
    - name: Create documentation
      run: npm run docs
      continue-on-error: true
    - name: Run other scripts that create project related files
      run: |
        npm run create:envExamples
        npm run create:jsonSchemas
        npm run create:manPage
        npm run create:windowsInstallerConfig
    - name: Create binary release
      run: npm run package:${{ matrix.os-name }}
    - name: Save binary artifact [binary]
      uses: actions/upload-artifact@v3
      with:
        name: moonpiebot-${{ matrix.os-name }}-node-${{ matrix.node-version }}
        path: bin/${{ matrix.binary-name }}
        retention-days: 14
        if-no-files-found: error
    - name: Create installer (Windows)
      if: matrix.os == 'windows-latest'
      run: makensis .\windows_installer.nsi
      working-directory: .\installer\windows_installer
    - name: Save binary artifact [binary+installer] (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: moonpiebot-installer-${{ matrix.os-name }}-node-${{ matrix.node-version }}
        path: bin/${{ matrix.binary-name-installer }}
        retention-days: 14
        if-no-files-found: error
    - name: Create man page (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: pandoc "man.md" -s -t man -o "${{ matrix.man-page-name }}"
      working-directory: installer
    - name: Save man page (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: moonpiebot-man-page
        path: installer/${{ matrix.man-page-name }}
        retention-days: 14
        if-no-files-found: error


  # Update the online (HTML) documentation
  update-documentation:

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    env:
      GITHUB_URL_REPO: https://github.com/AnonymerNiklasistanonym/MoonpieBot/blob/main

    # Only update documentation if the build didn't fail and happened on the main branch
    # That way changes on other branches won't override the current stable version
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies (apt - Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install graphviz
    - name: Install dependencies (choco - Windows)
      if: matrix.os == 'windows-latest'
      run: choco install graphviz nsis
    - name: Install dependencies (npm)
      run: npm ci
    - name: Create documentation
      run: npm run docs
    - name: Modify documentation
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Add application icon
        mkdir -p docs/res/icons
        cp res/icons/moonpiebot.png docs/res/icons/
        # Rename paths to example files
        sed -i "s#href=\"./.env#href=\"$GITHUB_URL_REPO/.env#g" docs/index.html
        sed -i "s#href=\"./installer#href=\"$GITHUB_URL_REPO/installer#g" docs/index.html
        sed -i "s#href=\"./custom#href=\"$GITHUB_URL_REPO/custom#g" docs/index.html
        sed -i "s#href=\"src/#href=\"$GITHUB_URL_REPO/src/#g" docs/index.html
        # Add favicon (doesn't work for more than the first page)
        cp res/icons/moonpiebot.ico docs/favicon.ico
        sed -i "s#</title>#</title><link rel=\"icon\" type=\"image/x-icon\" href=\"./favicon.ico\">#g" docs/index.html
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4.2.5
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: docs # The folder the action should deploy.

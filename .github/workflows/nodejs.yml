# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  # Run CI when a new version tag is created
  create:
    tags:
      - v*
  # Run CI when a new commit is pushed
  push:
    branches: [ main, dev ]
  # Run CI when a new pull request is created
  pull_request:
    branches: [ main, dev ]

jobs:


  # Check if the project can be built without errors
  # Linting, tests and documentation generation is allowed to fail so that in
  # case of an error in them the core build and scripts are still verified
  build:

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-latest,windows-latest]
        include:
          - os: ubuntu-latest
            os-name: linux
            binary-name: moonpiebot
            man-page-name: moonpiebot-man.1
          - os: windows-latest
            os-name: windows
            binary-name: moonpiebot.exe
            binary-name-installer: moonpiebot_setup.exe

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies (apt - Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install graphviz pandoc
    - name: Install dependencies (choco - Windows)
      if: matrix.os == 'windows-latest'
      run: choco install graphviz nsis pandoc
    - name: Install dependencies (NSIS-plugins - Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $EnVarPluginArchive = Join-Path "installer" (Join-Path "windows_installer" "EnVar.zip")
        $NsisDir = Join-Path "${env:ProgramFiles(x86)}" "NSIS"
        Expand-Archive $EnVarPluginArchive -DestinationPath $NsisDir -Force
    - name: Install dependencies (npm)
      run: npm ci
    - name: Run tests
      run: npm run test
      continue-on-error: true
    - name: Lint
      run: npm run lint
      continue-on-error: true
    - name: Build
      run: npm run build
    - name: Create documentation
      run: npm run docs
      continue-on-error: true
    - name: Run other scripts that create project related files
      run: npm run create
    - name: Create binary release
      run: npm run package:${{ matrix.os-name }}
    - name: Save binary release
      if: contains(github.head_ref, 'main') || startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v3
      with:
        name: moonpiebot-${{ matrix.os-name }}-node-${{ matrix.node-version }}
        path: bin/${{ matrix.binary-name }}
        retention-days: 7
        if-no-files-found: error
    - name: Create binary installer (Windows)
      if: matrix.os == 'windows-latest'
      run: makensis .\windows_installer.nsi
      working-directory: .\installer\windows_installer
    - name: Save binary installer (Windows)
      if: matrix.os == 'windows-latest' && (contains(github.head_ref, 'main') || startsWith(github.ref, 'refs/tags/v'))
      uses: actions/upload-artifact@v3
      with:
        name: moonpiebot-installer-${{ matrix.os-name }}-node-${{ matrix.node-version }}
        path: bin/${{ matrix.binary-name-installer }}
        retention-days: 7
        if-no-files-found: error
    - name: Create man page (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: pandoc "man.md" -s -t man -o "${{ matrix.man-page-name }}"
      working-directory: installer
    - name: Save man page (Linux)
      if: matrix.os == 'ubuntu-latest' && (contains(github.head_ref, 'main') || startsWith(github.ref, 'refs/tags/v'))
      uses: actions/upload-artifact@v3
      with:
        name: moonpiebot-man-page
        path: installer/${{ matrix.man-page-name }}
        retention-days: 7
        if-no-files-found: error


  # Creates a GitHub release if a new tag was pushed
  create-github-release:

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    # Only create a GitHub release if a new tag was pushed that starts with v
    # and if the build step was successful
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v2
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
    - run: ls
    - run: ls "moonpiebot-installer-windows-node-18.x"
    - name: Rename downloaded artifacts for release
      shell: pwsh
      working-directory: "scripts"
      run: ./rename_download_artifacts_github_actions.ps1
    - name: Create automatic GitHub release
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
         repo_token: "${{ secrets.GITHUB_TOKEN }}"
         automatic_release_tag: "${{ github.ref_name }}"
         prerelease: false
         title: "${{ github.ref_name }}"
         files: |
           bin/github_action_binaries/*
           res/icons/moonpiebot.ico
           res/icons/moonpiebot.png
           res/icons/moonpiebot.svg
           installer/PKGBUILD*

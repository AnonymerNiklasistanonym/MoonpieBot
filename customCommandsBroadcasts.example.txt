# This program has per default the ability to add/edit/delete custom commands
# and broadcasts if you are at least a moderator in the chat. The commands and
# broadcasts are persistently saved in a database.

# > Add a custom command with an ID, a RegEx expression to detect it and capture
#   contents of the match (https://regex101.com/) and a message
!addcc ID REGEX MESSAGE
# > Optionally a cooldown (in s) and user level (broadcaster, mod, vip, none)
#   are also supported
!addcc ID REGEX MESSAGE -ul=mod -cd=10
# > A single property can be edited of an existing custom command
!editcc PROPERTY NEW_VALUE
# > And using the custom command ID it can be deleted
!delcc ID

# > Add a custom broadcast with an ID, a cron expression to determine when the
#   broadcast should be sent (https://crontab.cronhub.io/) and a message
!addcb ID CRON_STRING MESSAGE
# > A single property can be edited of an existing custom broadcast
!editcb PROPERTY NEW_VALUE
# > And using the custom broadcast ID it can be deleted
!delcb ID

# Custom command examples:
# > Reply > USER
!addcc ping ^\s*!ping(?:\s|$) '@$(USER) pong'
# > Random numbers > RANDOM_NUMBER
!addcc random ^\s*!random(?:\s|$) $(RANDOM_NUMBER=0<->100)%
# > Count command calls > REGEX_GROUP
!addcc count ^\s*!count(?:\s|$) 'the test command was called $(REGEX_GROUP) time$(IF_GREATER=$(REGEX_GROUP)>1|s)'
# > Add a cooldown to a command
!addcc cooldown ^\s*!cooldown(?:\s|$) 'This command can only be executed every 30s' -cd=30
# > Reference parts of a message > REGEX_GROUP,IF_NOT_UNDEFINED
!addcc references ^\s*!regex(?:\s+(.*?)\s*$|\s|$) 'Detected the command !regex with $(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)|'$(REGEX_GROUP=1)' as query)$(IF_UNDEFINED=$(REGEX_GROUP=1)|no query after the command :\()'
# > Use Twitch API for more specific shoutouts > REGEX_GROUP,TWITCH_API_GET_GAME
!addcc shoutout ^\s*!so\s+@?(\S+)\s*(?:.*)$ '/announce Go check out $(REGEX_GROUP=1) at https://www.twitch.tv/$(REGEX_GROUP=1) <3 They were last playing $(TWITCH_API_GET_GAME=$(REGEX_GROUP=1))' -ul=mod
# > Use Twitch API to get the follow age >
#   REGEX_GROUP,TWITCH_API_GET_FOLLOW_AGE,TIME_IN_S_TO_HUMAN_READABLE_STRING_SHORT
!addcc followage ^\s*!followage(?:\s+(.*?)\s*$|\s|$) '@$(USER)$(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)| $(REGEX_GROUP=1) followed the channel since $(TIME_IN_S_TO_HUMAN_READABLE_STRING_SHORT=$(TWITCH_API_GET_FOLLOW_AGE=$(REGEX_GROUP=1))))$(IF_UNDEFINED=$(REGEX_GROUP=1)| You followed the channel since $(TIME_IN_S_TO_HUMAN_READABLE_STRING_SHORT=$(TWITCH_API_GET_FOLLOW_AGE=$(USER))))'
# > Use Twitch API to get/set the title >
#   REGEX_GROUP,TWITCH_API_GET_TITLE,TWITCH_API_SET_TITLE [user:edit:broadcast
#   scope necessary to set the title]
!addcc title ^\s*!title(?:\s+(.*?)\s*$|\s|$) '@$(USER)$(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)| You updated the title to '$(TWITCH_API_SET_TITLE=$(REGEX_GROUP=1))')$(IF_UNDEFINED=$(REGEX_GROUP=1)| The current title is '$(TWITCH_API_GET_TITLE)')' -ul=mod
# > Use Twitch API to get/set the game >
#   REGEX_GROUP,TWITCH_API_GET_GAME,TWITCH_API_SET_GAME [user:edit:broadcast
#   scope necessary to set the game]
!addcc game ^\s*!game(?:\s+(.*?)\s*$|\s|$) '@$(USER) $(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)|You updated the game to '$(TWITCH_API_SET_GAME=$(REGEX_GROUP=1))')$(IF_UNDEFINED=$(REGEX_GROUP=1)|The current game is '$(TWITCH_API_GET_GAME)')' -ul=mod
# > Death counter that works across commands [1/4] > CUSTOM_COMMAND_DATA_ADD
!addcc 'death counter add' ^\s*!death(?:\s|$) '@$(USER) death was added, streamer died $(CUSTOM_COMMAND_DATA_ADD=death+=1) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)' -ul=mod
# > Death counter that works across commands [2/4] > CUSTOM_COMMAND_DATA_GET
!addcc 'death counter get' ^\s*!deaths(?:\s|$) '@$(USER) streamer died $(CUSTOM_COMMAND_DATA_GET=death<>0) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)'
# > Death counter that works across commands [3/4] > CUSTOM_COMMAND_DATA_SET
!addcc 'death counter set' ^\s*!resetDeaths(?:\s+(.*?)\s*$|\s|$) '@$(USER) $(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)|deaths were set to '$(REGEX_GROUP=1)', streamer died $(CUSTOM_COMMAND_DATA_SET_NUMBER=death=#=$(REGEX_GROUP=1)))$(IF_UNDEFINED=$(REGEX_GROUP=1)|deaths were reset to 0, streamer died $(CUSTOM_COMMAND_DATA_SET_NUMBER=death=#=0)) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)' -ul=mod
# > Death counter that works across commands [4/4] > CUSTOM_COMMAND_DATA_REMOVE
!addcc 'death counter remove' ^\s*!removeDeath(?:\s|$) '@$(USER) death was removed, streamer died $(CUSTOM_COMMAND_DATA_REMOVE=death-=1) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)' -ul=mod
# > List all available macros and plugins for debugging > HELP
!addcc help ^\s*!help(?:\s|$) $(HELP) -ul=mod

# Custom broadcast examples:
!addcb 'Custom timer 1' '*/30 * * * * *' 'Test every 30 seconds: $(RANDOM_NUMBER)%'
!addcb 'Custom timer 2' '*/15 * * * *' 'Test every 15 minutes'
!addcb 'Custom timer 3' '0 */1 * * *' 'Test every hour'

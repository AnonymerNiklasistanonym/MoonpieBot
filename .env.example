# This is an example config file for the MoonpieBot that contains all
# environment variables that the bot uses.
# You can either set the variables yourself or copy this file, rename it from
# `.env.example` to `.env` and edit it with your own values since this is just
# an example to show how it should look.
# If a line that starts with 'MOONPIE_CONFIG_' has the symbol '#' in front of it
# that means it will be ignored as a comment. This means you can add custom
# comments and easily enable/disable any 'MOONPIE_CONFIG_' option by adding or
# removing that symbol.

################################################################################
# LOGGING
# ------------------------------------------------------------------------------
# Customize how much and where should be logged.
################################################################################
# > The log level of the log messages that are printed to the console.
#   Supported values: 'debug', 'error', 'info', 'warn'
#MOONPIE_CONFIG_LOGGING_CONSOLE_LOG_LEVEL=info
# > The directory file path of the log files
#   Legacy name: 'MOONPIE_CONFIG_DIR_LOGS'
#MOONPIE_CONFIG_LOGGING_DIRECTORY_PATH=logs
# > The log level of the log messages that are written to the log files.
#   Supported values: 'debug', 'error', 'info', 'warn'
#   Legacy name: 'MOONPIE_CONFIG_FILE_LOG_LEVEL'
#MOONPIE_CONFIG_LOGGING_FILE_LOG_LEVEL=debug

################################################################################
# TWITCH
# ------------------------------------------------------------------------------
# REQUIRED variables that need to be set for ANY configuration to connect to
# Twitch chat.
################################################################################
# > A with a space separated list of all the channels the bot should be active.
#   Legacy name: 'MOONPIE_CONFIG_TWITCH_CHANNEL'
#   THIS VARIABLE IS REQUIRED!
#   (The following line is only an example!)
MOONPIE_CONFIG_TWITCH_CHANNELS=twitch_channel_name1,twitch_channel_name2
# > Turn on debug logs for the Twitch client to see all messages, joins,
#   reconnects and more.
#   Supported values: 'OFF', 'ON'
#MOONPIE_CONFIG_TWITCH_DEBUG=OFF
# > The name of the twitch account/channel that should be imitated.
#   THIS VARIABLE IS REQUIRED!
#   (The following line is only an example!)
MOONPIE_CONFIG_TWITCH_NAME=twitch_account_name
# > A Twitch OAuth token (get it from: https://twitchapps.com/tmi/) of the
#   Twitch account specified in MOONPIE_CONFIG_TWITCH_NAME.
#   THIS VARIABLE IS REQUIRED!
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
MOONPIE_CONFIG_TWITCH_OAUTH_TOKEN=oauth:abcdefghijklmnop

################################################################################
# MOONPIE
# ------------------------------------------------------------------------------
# Every day a user can claim a moonpie and the count is saved in a persistent
# database.
################################################################################
# > The number of hours for which a user is unable to claim a moonpie after
#   claiming one (less than 24 in case of daily streams).
#   Legacy name: 'MOONPIE_CONFIG_MOONPIE_COOLDOWN_HOURS'
#MOONPIE_CONFIG_MOONPIE_CLAIM_COOLDOWN_HOURS=18
# > The database file path that contains the persistent moonpie data.
#   Legacy name: 'MOONPIE_CONFIG_DB_FILEPATH'
#MOONPIE_CONFIG_MOONPIE_DATABASE_PATH=moonpie.db
# > You can provide a list of commands that should be enabled, if this is empty
#   or not set all commands are enabled (set the value to 'none' if no commands
#   should be enabled).
#   Supported list values: 'about', 'add', 'claim', 'commands', 'delete', 'get',
#   'leaderboard', 'remove', 'set'
#   - about: Get version information of the bot
#   (everyone: !moonpie about)
#   - add: Add moonpies to a user
#   (broadcaster: !moonpie add userName:=('TEXT'/TEXT) countAdd:=NUMBERS)
#   - claim: (If not already claimed) Claim a moonpie once every set hours and
#   return the current count and the leaderboard position
#   (everyone: !moonpie)
#   - commands: List all enabled commands
#   (everyone: !moonpie commands)
#   - delete: Delete moonpies of a user
#   (broadcaster: !moonpie delete userName:=('TEXT'/TEXT))
#   - get: Get moonpies of a user
#   (everyone: !moonpie get userName:=('TEXT'/TEXT))
#   - leaderboard: List the top moonpie holders
#   (everyone: !moonpie leaderboard[ startingRank:=NUMBERS])
#   - remove: Remove moonpies from a user
#   (broadcaster: !moonpie remove userName:=('TEXT'/TEXT) countRemove:=NUMBERS)
#   - set: Set moonpies of a user
#   (broadcaster: !moonpie set userName:=('TEXT'/TEXT) countSet:=NUMBERS)
#   Empty list value: 'none'
#   Legacy name: 'MOONPIE_CONFIG_ENABLE_COMMANDS'
#MOONPIE_CONFIG_MOONPIE_ENABLE_COMMANDS=about,commands

################################################################################
# OSU
# ------------------------------------------------------------------------------
# Given a StreamCompanion connection osu! beatmap information (!np) can be
# provided or given an osu! OAuth client ID/secret and osu! ID plus an osu! IRC
# login the bot can enable beatmap requests or fetch other osu! related
# information.
################################################################################
# > You can provide a list of commands that should be enabled, if this is empty
#   or not set all commands are enabled (set the value to 'none' if no commands
#   should be enabled). If you don't provide osu! API credentials and/or a
#   StreamCompanion connection commands that need that won't be enabled!
#   Supported list values: 'commands', 'last_request', 'np', 'permit_request',
#   'pp', 'requests', 'rp', 'score'
#   - commands: List all enabled commands
#   (everyone: !osu commands)
#   - last_request: Resend the last request (or requests if a custom count is
#   provided) in case of a osu! client restart
#   (mod: !osuLastRequest[ lastRequestCount:=NUMBERS])
#   - np: Get a link to the currently selected map (if an optional
#   StreamCompanion URL/directory path is provided this information will be used
#   to get the current map information, otherwise the osu! window text will be
#   used and searched for using the given osu! credentials [very slow and only
#   works if the map is being played plus no detailed runtime information like
#   mods and not all map information will be correct especially if it's not a
#   ranked map])
#   (everyone: !np)
#   - permit_request: Permit last blocked request
#   (mod: !osuPermitRequest)
#   - pp: Get general account information (pp, rank, country, ...) of the
#   account or of the given osu! player
#   (everyone: !pp[ (osuUserId:=NUMBERS/osuUserName:=('TEXT'/TEXT))])
#   - requests: Request a beatmap requests using an osu! URL and optional
#   comment
#   (everyone: osuBeatmapUrl[ comment])
#   - requests: Get if beatmap requests are currently enabled and with which
#   demands if there are any, Turn beatmap requests on or off with an optional
#   message
#   (get=everyone on/off=mod: !osuRequests[( on/ off)[ message:=('TEXT'/TEXT)]])
#   - requests: Set beatmap demands/options (arMax, arMin, csMax, csMin,
#   detailed, detailedIrc, lengthInMinMax, lengthInMinMin, messageOff,
#   messageOn, redeemId, starMax, starMin)
#   (mod: !osuRequests set option:=TEXT optionValue:=('TEXT'/TEXT))
#   - requests: Reset beatmap request demands/options (arMax, arMin, csMax,
#   csMin, detailed, detailedIrc, lengthInMinMax, lengthInMinMin, messageOff,
#   messageOn, redeemId, starMax, starMin) back to their default value
#   (mod: !osuRequests unset option:=TEXT)
#   - rp: Get the most recent play of the account or of the given osu! player
#   (everyone: !rp[ (osuUserId:=NUMBERS/osuUserName:=('TEXT'/TEXT))])
#   - score: Get the top score of the given osu! player on the most recently
#   mentioned map in chat (from a beatmap request, rp, np)
#   (everyone: !score osuUserName:=('TEXT'/TEXT))
#   Empty list value: 'none'
#MOONPIE_CONFIG_OSU_ENABLE_COMMANDS=commands,last_request,np,permit_request,pp,requests,rp,score

################################################################################
# OSU API
# ------------------------------------------------------------------------------
# A osu! API connection can be enabled to enable beatmap requests and other osu!
# commands.
################################################################################
# > The osu! client ID (and client secret) to use the osu! API v2. To get it go
#   to your account settings, Click 'New OAuth application' and add a custom
#   name and URL (https://osu.ppy.sh/home/account/edit#oauth). After doing that
#   you can copy the client ID (and client secret).
#   Legacy name: 'MOONPIE_CONFIG_OSU_CLIENT_ID'
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_API_CLIENT_ID=1234
# > Check the description of MOONPIE_CONFIG_OSU_API_CLIENT_ID.
#   Legacy name: 'MOONPIE_CONFIG_OSU_CLIENT_SECRET'
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_API_CLIENT_SECRET=dadasfsafsafdsadffasfsafasfa
# > The default osu! account ID used to check for recent play or a top play on a
#   map.
#   Legacy name: 'MOONPIE_CONFIG_OSU_DEFAULT_ID'
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_API_DEFAULT_ID=1185432
# > The database file path that contains the persistent osu! (beatmap) requests
#   configuration.
#   Legacy name: 'MOONPIE_CONFIG_OSU_API_RECOGNIZE_MAP_REQUESTS_DATABASE_PATH'
#MOONPIE_CONFIG_OSU_API_REQUESTS_CONFIG_DATABASE_PATH=osu_requests_config.db
# > If beatmap requests are enabled
#   (MOONPIE_CONFIG_OSU_ENABLE_COMMANDS=requests) additionally output more
#   detailed information about the map in the chat. This can also be set at
#   runtime (!osuRequests set option optionValue) and stored persistently in a
#   database (MOONPIE_CONFIG_OSU_API_REQUESTS_CONFIG_DATABASE_PATH) but if
#   provided will override the current value in the database on start of the
#   bot.
#   Supported values: 'OFF', 'ON'
#   Legacy names: 'MOONPIE_CONFIG_OSU_RECOGNIZE_MAP_REQUESTS_DETAILED',
#   'MOONPIE_CONFIG_OSU_API_RECOGNIZE_MAP_REQUESTS_DETAILED'
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_API_REQUESTS_DETAILED=ON
# > If beatmap requests are enabled
#   (MOONPIE_CONFIG_OSU_ENABLE_COMMANDS=requests) make it that only messages
#   that used a channel point redeem will be recognized. This can also be set at
#   runtime (!osuRequests set option optionValue) and stored persistently in a
#   database (MOONPIE_CONFIG_OSU_API_REQUESTS_CONFIG_DATABASE_PATH) but if
#   provided will override the current value in the database on start of the
#   bot.
#   Legacy name: 'MOONPIE_CONFIG_OSU_API_RECOGNIZE_MAP_REQUESTS_REDEEM_ID'
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_API_REQUESTS_REDEEM_ID=651f5474-07c2-4406-9e59-37d66fd34069

################################################################################
# OSU STREAM COMPANION
# ------------------------------------------------------------------------------
# A osu! StreamCompanion (https://github.com/Piotrekol/StreamCompanion)
# connection can be enabled for a much better !np command via either a websocket
# OR file interface.
################################################################################
# > osu! StreamCompanion directory (file interface) path to use a running
#   StreamCompanion instance to always get the currently being played beatmap,
#   used mods and more (This is ignored if
#   MOONPIE_CONFIG_OSU_STREAM_COMPANION_URL is also provided). To configure the
#   StreamCompanion output and for example update certain values like the
#   download link even when not playing a map you need to open StreamCompanion.
#   Go to the section 'Output Patterns' and then edit the used rows (like
#   'np_all') to change the format. You can also change the 'Save event' of a
#   row like for the current mods or download link so both will be live updated
#   even if no song is played.
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_STREAM_COMPANION_DIR_PATH='C:\Program Files (x86)\StreamCompanion\Files'
# > osu! StreamCompanion URL (websocket interface) to use a running
#   StreamCompanion instance to get the currently being played beatmap, used
#   mods and more (Providing a value will ignore
#   MOONPIE_CONFIG_OSU_STREAM_COMPANION_DIR_PATH). Many users have problem with
#   the websocket interface but the file interface worked for everyone so far.
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_STREAM_COMPANION_URL=localhost:20727

################################################################################
# OSU IRC
# ------------------------------------------------------------------------------
# Optional osu! IRC connection that can be enabled to send beatmap requests to
# the osu! client.
################################################################################
# > The osu! irc server password and senderUserName. To get them go to
#   https://osu.ppy.sh/p/irc and login (in case that clicking the 'Begin Email
#   Verification' button does not reveal a text input refresh the page and click
#   the button again -> this also means you get a new code!)
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_IRC_PASSWORD=senderServerPassword
# > The osu! account name that should receive the requests (can be the same
#   account as the sender!).
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_IRC_REQUEST_TARGET=receiverUserName
# > Check the description of MOONPIE_CONFIG_OSU_IRC_PASSWORD.
#   (The following line is only an example!)
#MOONPIE_CONFIG_OSU_IRC_USERNAME=senderUserName

################################################################################
# SPOTIFY
# ------------------------------------------------------------------------------
# Optional Spotify commands that can be enabled.
################################################################################
# > The database file path that contains the persistent spotify data.
#MOONPIE_CONFIG_SPOTIFY_DATABASE_PATH=spotify.db
# > You can provide a list of commands that should be enabled, if this is empty
#   or not set all commands are enabled (set the value to 'none' if no commands
#   should be enabled). If you don't provide Spotify API credentials the
#   commands won't be enabled!
#   Supported list values: 'commands', 'song'
#   - commands: List all enabled commands
#   (everyone: !spotify commands)
#   - song: Get the currently playing (and most recently played) song on the
#   connected Spotify account
#   (everyone: !song)
#   Empty list value: 'none'
#MOONPIE_CONFIG_SPOTIFY_ENABLE_COMMANDS=commands,song

################################################################################
# SPOTIFY API
# ------------------------------------------------------------------------------
# Given a Spotify client ID/secret the bot can fetch some Spotify related
# information like the currently played song.
################################################################################
# > Provide client id/secret to enable Spotify API calls or Spotify commands
#   (get them by using https://developer.spotify.com/dashboard/applications and
#   creating an application - give the application the name 'MoonpieBot' and add
#   the redirect URI 'http://localhost:9727' by clicking the button 'edit
#   settings' after clicking on the application entry in the dashboard). At the
#   first start a browser window will open where you need to successfully
#   authenticate once.
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_SPOTIFY_API_CLIENT_ID=abcdefghijklmnop
# > Check the description of MOONPIE_CONFIG_SPOTIFY_API_CLIENT_ID.
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_SPOTIFY_API_CLIENT_SECRET=abcdefghijklmnop
# > Providing this token is not necessary but optional. You can get this token
#   by authenticating once successfully using the
#   MOONPIE_CONFIG_SPOTIFY_API_CLIENT_ID and
#   MOONPIE_CONFIG_SPOTIFY_API_CLIENT_SECRET. This will be done automatically by
#   this program if both values are provided (the browser window will open after
#   starting). After a successful authentication via this website the refresh
#   token can be copied from there but since it will be automatically stored in
#   a database this variable does not need to be provided. If a value is found
#   it is automatically written into the database and does not need to be
#   provided after that.
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_SPOTIFY_API_REFRESH_TOKEN=abcdefghijklmnop

################################################################################
# CUSTOM COMMANDS & BROADCASTS
# ------------------------------------------------------------------------------
# Custom commands and custom broadcasts can be added/edited/deleted via the
# Twitch chat which are persistently saved in a database. Custom commands will
# be checked for every new message. Custom broadcasts will be scheduled at start
# of the bot and rescheduled on any change.
################################################################################
# > The database file path that contains the persistent custom commands and
#   broadcasts data.
#MOONPIE_CONFIG_CUSTOM_COMMANDS_BROADCASTS_DATABASE_PATH=customCommandsBroadcasts.db
# > You can provide a list of commands that should be enabled, if this is empty
#   or not set all commands are enabled (set the value to 'none' if no commands
#   should be enabled).
#   Supported list values: 'add_broadcast', 'add_command', 'commands',
#   'delete_broadcast', 'delete_command', 'edit_broadcast', 'edit_command',
#   'list_broadcasts', 'list_commands'
#   - add_broadcast: Add a broadcast with an ID, a cron expression to determine
#   when the broadcast should be sent
#   ([crontab.cronhub.io](https://crontab.cronhub.io/)) and a message
#   (mod: !addcb id:=('TEXT'/TEXT) cronString:=('TEXT'/TEXT)
#   message:=('TEXT'/TEXT))
#   - add_command: Add a command with an ID, a RegEx expression to detect it and
#   capture contents of the match ([regex101.com](https://regex101.com/)) and a
#   message - Optionally a cooldown (in s) and user level (broadcaster, mod,
#   vip, none) are also supported
#   (mod: !addcc id:=('TEXT'/TEXT) regex:=('TEXT'/TEXT) message:=('TEXT'/TEXT)[
#   -ul=userLevel:=(mod/vip/none/broadcaster)][ -cd=cooldownInS:=NUMBERS])
#   - commands: List all enabled commands
#   (everyone: !(cc[s]/cb[s]/cc[scb][s]) commands)
#   - delete_broadcast: Delete a broadcast
#   (mod: !delcb id:=('TEXT'/TEXT))
#   - delete_command: Delete a command
#   (mod: !delcc id:=('TEXT'/TEXT))
#   - edit_broadcast: A single property (cronString, description, id, message)
#   can be edited of an existing broadcast
#   (mod: !editcb id:=('TEXT'/TEXT) option:=TEXT optionValue:=('TEXT'/TEXT))
#   - edit_command: A single property (cooldownInS, count, description, id,
#   message, regex, userLevel) can be edited of an existing command
#   (mod: !editcc id:=('TEXT'/TEXT) option:=TEXT optionValue:=('TEXT'/TEXT))
#   - list_broadcasts: List all callbacks (an offset number can be provided if
#   multiple were added or an ID can be provided to only list one specific
#   broadcast)
#   (everyone: !listcc[s][( listOffset:=NUMBERS/ id:=('TEXT'/TEXT))])
#   - list_commands: List all commands (an offset number can be provided if
#   multiple were added or an ID can be provided to only list one specific
#   command)
#   (everyone: !listcb[s][( listOffset:=NUMBERS/ id:=('TEXT'/TEXT))])
#   Empty list value: 'none'
#MOONPIE_CONFIG_CUSTOM_COMMANDS_BROADCASTS_ENABLE_COMMANDS=add_broadcast,add_command,commands,delete_broadcast,delete_command,edit_broadcast,edit_command,list_broadcasts,list_commands

################################################################################
# TWITCH API
# ------------------------------------------------------------------------------
# Optional Twitch API connection that can be enabled for advanced custom
# commands that for example set/get the current game/title.
################################################################################
# > Provide client id/access token to enable Twitch API calls in commands (get
#   them by using https://twitchtokengenerator.com with the scopes you want to
#   have). The recommended scopes are: `user:edit:broadcast` to edit stream
#   title/game, `user:read:broadcast`, `chat:read`, `chat:edit`.
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_TWITCH_API_ACCESS_TOKEN=abcdefghijklmnop
# > Check the description of MOONPIE_CONFIG_TWITCH_API_ACCESS_TOKEN.
#   KEEP THIS VARIABLE PRIVATE!
#   (The following line is only an example!)
#MOONPIE_CONFIG_TWITCH_API_CLIENT_ID=abcdefghijklmnop

################################################################################
# LURK
# ------------------------------------------------------------------------------
# Lurk command that welcomes chatters back.
################################################################################
# > You can provide a list of commands that should be enabled, if this is empty
#   or not set all commands are enabled (set the value to 'none' if no commands
#   should be enabled).
#   Supported list values: 'lurk'
#   - lurk: Using this lurk command chatters are welcomed back after they come
#   back
#   (everyone: !lurk)
#   Empty list value: 'none'
#MOONPIE_CONFIG_LURK_ENABLE_COMMANDS=none

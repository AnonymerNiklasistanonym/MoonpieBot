{
    "$schema": "./customCommands.schema.json",
    "commands": [
        {
            "channels": [
                "salk1n616"
            ],
            "id": "Reply > USER",
            "message": "@$(USER) pong",
            "regexString": "^\\s*!ping(?:\\s|$)"
        },
        {
            "channels": [
                "salk1n616"
            ],
            "id": "Random numbers > RANDOM_NUMBER",
            "message": "$(RANDOM_NUMBER=0<->100)%",
            "regexString": "^\\s*!random(?:\\s|$)"
        },
        {
            "id": "Count command calls > REGEX_GROUP",
            "channels": [
                "salk1n616"
            ],
            "message": "the test command was called $(REGEX_GROUP) time$(IF_GREATER=$(REGEX_GROUP)>1|s)",
            "regexString": "^\\s*!count(?:\\s|$)"
        },
        {
            "cooldownInS": 30,
            "id": "Add a cooldown to a command",
            "channels": [
                "salk1n616"
            ],
            "message": "This command can only be executed every 30s",
            "regexString": "^\\s*!cooldown(?:\\s|$)"
        },
        {
            "id": "Reference parts of a message > REGEX_GROUP,IF_NOT_UNDEFINED",
            "channels": [
                "salk1n616"
            ],
            "count": 20,
            "message": "Detected the command !regex with $(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)|'$(REGEX_GROUP=1)' as query)$(IF_UNDEFINED=$(REGEX_GROUP=1)|no query after the command :\\()",
            "regexString": "^\\s*!regex(?:\\s+(.*?)\\s*$|\\s|$)"
        },
        {
            "id": "Use Twitch API for more specific shout outs > REGEX_GROUP,TWITCH_API_GET_GAME",
            "channels": [
                "salk1n616"
            ],
            "message": "/announce Go check out $(REGEX_GROUP=1) at https://www.twitch.tv/$(REGEX_GROUP=1) <3 They were last playing $(TWITCH_API_GET_GAME=$(REGEX_GROUP=1))",
            "regexString": "^\\s*!so\\s+@?(\\S+)\\s*(?:.*)$",
            "userLevel": "mod"
        },
        {
            "id": "Use Twitch API to get the follow age > REGEX_GROUP,TWITCH_API_GET_FOLLOW_AGE,TIME_IN_S_TO_HUMAN_READABLE_STRING_SHORT",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER)$(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)| $(REGEX_GROUP=1) followed the channel since $(TIME_IN_S_TO_HUMAN_READABLE_STRING_SHORT=$(TWITCH_API_GET_FOLLOW_AGE=$(REGEX_GROUP=1))))$(IF_UNDEFINED=$(REGEX_GROUP=1)| You followed the channel since $(TIME_IN_S_TO_HUMAN_READABLE_STRING_SHORT=$(TWITCH_API_GET_FOLLOW_AGE=$(USER))))",
            "regexString": "^\\s*!followage(?:\\s+(.*?)\\s*$|\\s|$)"
        },
        {
            "id": "Use Twitch API to get/set the title > REGEX_GROUP,TWITCH_API_GET_TITLE,TWITCH_API_SET_TITLE [user:edit:broadcast scope necessary to set the title]",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER)$(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)| You updated the title to '$(TWITCH_API_SET_TITLE=$(REGEX_GROUP=1))')$(IF_UNDEFINED=$(REGEX_GROUP=1)| The current title is '$(TWITCH_API_GET_TITLE)')",
            "regexString": "^\\s*!title(?:\\s+(.*?)\\s*$|\\s|$)",
            "userLevel": "mod"
        },
        {
            "id": "Use Twitch API to get/set the game > REGEX_GROUP,TWITCH_API_GET_GAME,TWITCH_API_SET_GAME [user:edit:broadcast scope necessary to set the game]",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER) $(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)|You updated the game to '$(TWITCH_API_SET_GAME=$(REGEX_GROUP=1))')$(IF_UNDEFINED=$(REGEX_GROUP=1)|The current game is '$(TWITCH_API_GET_GAME)')",
            "regexString": "^\\s*!game(?:\\s+(.*?)\\s*$|\\s|$)",
            "userLevel": "mod"
        },
        {
            "id": "Death counter that works across commands [1/4] > CUSTOM_COMMAND_DATA_ADD",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER) death was added, streamer died $(CUSTOM_COMMAND_DATA_ADD=death+=1) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)",
            "regexString": "^\\s*!death(?:\\s|$)",
            "userLevel": "mod"
        },
        {
            "id": "Death counter that works across commands [2/4] > CUSTOM_COMMAND_DATA_GET",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER) streamer died $(CUSTOM_COMMAND_DATA_GET=death<>0) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)",
            "regexString": "^\\s*!deaths(?:\\s|$)"
        },
        {
            "id": "Death counter that works across commands [3/4] > CUSTOM_COMMAND_DATA_SET",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER) $(IF_NOT_UNDEFINED=$(REGEX_GROUP=1)|deaths were set to '$(REGEX_GROUP=1)', streamer died $(CUSTOM_COMMAND_DATA_SET_NUMBER=death=#=$(REGEX_GROUP=1)))$(IF_UNDEFINED=$(REGEX_GROUP=1)|deaths were reset to 0, streamer died $(CUSTOM_COMMAND_DATA_SET_NUMBER=death=#=0)) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)",
            "regexString": "^\\s*!resetDeaths(?:\\s+(.*?)\\s*$|\\s|$)",
            "userLevel": "mod"
        },
        {
            "id": "Death counter that works across commands [4/4] > CUSTOM_COMMAND_DATA_REMOVE",
            "channels": [
                "salk1n616"
            ],
            "message": "@$(USER) death was removed, streamer died $(CUSTOM_COMMAND_DATA_REMOVE=death-=1) time$(IF_NOT_EQUAL=$(CUSTOM_COMMAND_DATA_GET=death<>0)!==1|s)",
            "regexString": "^\\s*!removeDeath(?:\\s|$)",
            "userLevel": "mod"
        },
        {
            "id": "List all available macros and plugins for debugging > HELP",
            "channels": [
                "salk1n616"
            ],
            "message": "$(HELP)",
            "regexString": "^\\s*!help(?:\\s|$)",
            "userLevel": "mod"
        }
    ]
}